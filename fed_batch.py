# -*- coding: utf-8 -*-
"""Fed batch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ObRp7r-8FOwKja458iTYTxqIt-AeQZFy
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
import scipy
from scipy.integrate import odeint

# kinetic constants for monod model

mu_max = 0.2 # maximum sp growth rate
ks = 2 # saturation constant
kd = 0.0008 #cell death ratio
m = 0.003 # maintanence coefficient
sf = 150 # fed batch substrate

# yields/ proportion of consumption obtained from stoichiometry

yps = 0.1
yxs = 0.5
ypx = 0.2
yo2 = 0.3 

# properties to calculate oxygen dependency of the fed batch fermentation

p = 101325
r = 8.314
temp = 298.15

ko2 = 0.1 # oxygen half velocity constant
kla = 0.005 # mass transfer coefficient
h2 = 33 # gas-liquid partition coefficient of O2
mw = 32 # molecular weight of O2

O2g = ((p * 0.205 * mw) / (r * temp))

# ODE integration

    #declaration of flowrate
def F(t):
  return 0.1

def model(z, t):
  [X, S, P, O2l, V] = z

  # compute coefficients
  mu = ((mu_max * S) / (ks + S)) * (O2l / (ko2 + O2l))
  

  qs = mu / yxs

  rX = ((mu - kd) * X)
  rS = (qs + m) * X
  rO2 = (yo2 * rS) + (kla * ((O2g / h2) - O2l))

  # the differential equations corresponding to mass balances

  dVdt = F(t)

  dXdt = rX - ((X * F(t)) / V)

  dSdt = ((F(t) / V) * (sf - S)) - rS

  dPdt = ((-F(t) *P) / V) + (ypx * mu * X)

  dOdt = ((F(t) / V) * O2l) + rO2
  
  return (dXdt, dSdt, dPdt, dOdt, dVdt)

z0 = [1, 100, 0, 0.001, 50]  # initial conditions for X, S, P, O2l, V
t = np.linspace(0, 50, 1000)
sol = odeint(model, z0, t)
X, S, P, O2l, V = sol.transpose()

fig, ax1 = plt.subplots()

ax2 = ax1.twinx()
ax1.plot(t, X, 'g-')
ax1.plot(t, S,'-')
ax1.plot(t, P,'r-')
ax1.plot(t, O2l,'y-')
ax1.legend(['Cell Conc.',
            'Substrate Conc.',
            'Product Conc.',
            'Oxygen Conc'])
ax2.plot(t, V, 'b')
ax2.legend(['Vol'])

plt.title('Fed batch model')
ax1.set_xlabel('Time [hrs]')
ax1.set_ylabel('Concentration [g/liter]', color='g')
ax2.set_ylabel('Vol [m3]', color='b')




plt.show()